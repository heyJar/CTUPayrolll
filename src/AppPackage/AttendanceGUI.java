
package AppPackage;



import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;


import javax.swing.ImageIcon;

import javax.swing.JOptionPane;



public class AttendanceGUI extends javax.swing.JFrame {    
    AdminGUI AGUI = new AdminGUI();
    Date date = new Date();
    MarqueeTest MarqueeText = new MarqueeTest();
    ValidateLogin VL = new ValidateLogin();
    dbConnect dbC = new dbConnect();
   timeDiff getDiff = new timeDiff();

    ClockLabel dateLable = new ClockLabel("date");
    ClockLabel timeLable = new ClockLabel("time");
    ClockLabel dayLable = new ClockLabel("day");
    
    Keypad keyP = new Keypad();
    
    int xMouse;
    int yMouse;
    String s= "Some text here!";
    
    Connection conn;
    Statement stmt;
    String sql;
    ResultSet rs;
    String ImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/camOff.png";

    
    
    public AttendanceGUI(){
        initComponents();
   
          try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = dbC.getConnection();
            stmt = conn.createStatement();
            
            sql = "SELECT message FROM announcements";
            rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           
           String msg = rs.getString("message");

           s = msg;

      }
      rs.close();
            
        } catch(HeadlessException | ClassNotFoundException | SQLException e) {
                System.out.println("Not Connected");
        }
 

          
        setTitle("CTU Employee Information System");
        setIconImage(new ImageIcon(getClass().getResource("/imgPackage/edtrps32x32.png")).getImage());
        
        numScanImg.add(keyP.camScanImg);
        numScanIDView.add(keyP.textarea);
        numScanName.add(keyP.textareaName);

        attendTime.add(timeLable);
        attendDate.add(dateLable);
        
        inOutButtonx.add(keyP.statusBut);
        numpad.add(keyP);
        MarqueePanel mp = new MarqueePanel(s, 105);
        mp.setBackground(new Color(57,66,100)); 
        announceBar.add(mp);

        announceBar.setVisible(true);
        mp.start();
        

        

    }
 
    
    
    
    public ImageIcon ResizeImage(String imagePath, byte[] pic){
        ImageIcon myImage = null;
        
        if(imagePath != null) {
            myImage = new ImageIcon(imagePath);
        } else {
            myImage = new ImageIcon(pic);
        }
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(numScanImg.getWidth(), numScanImg.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginDialog = new javax.swing.JDialog();
        adminDialogClose = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        userPass = new javax.swing.JPasswordField();
        userLogin = new javax.swing.JLabel();
        adminDialogBg = new javax.swing.JLabel();
        inOutDialog = new javax.swing.JDialog();
        inOutDialogClose = new javax.swing.JLabel();
        inOutOk = new javax.swing.JLabel();
        inOutDialogBg = new javax.swing.JLabel();
        adminBtn = new javax.swing.JLabel();
        numScanImg = new java.awt.Panel();
        numScanName = new java.awt.Panel();
        numScanIDView = new java.awt.Panel();
        announceBar = new java.awt.Panel();
        numpad = new java.awt.Panel();
        attendTime = new java.awt.Panel();
        attendDate = new java.awt.Panel();
        inOutButtonx = new java.awt.Panel();
        winMin = new javax.swing.JLabel();
        winClose = new javax.swing.JLabel();
        winDrag = new javax.swing.JLabel();
        attendanceMain = new javax.swing.JLabel();

        loginDialog.setUndecorated(true);
        loginDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adminDialogClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        adminDialogClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminDialogCloseMouseClicked(evt);
            }
        });
        loginDialog.getContentPane().add(adminDialogClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 30, 30));

        userName.setBackground(new java.awt.Color(17, 168, 171));
        userName.setForeground(new java.awt.Color(255, 255, 255));
        userName.setBorder(null);
        userName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameActionPerformed(evt);
            }
        });
        userName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userNameKeyPressed(evt);
            }
        });
        loginDialog.getContentPane().add(userName, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 87, 240, 40));

        userPass.setBackground(new java.awt.Color(17, 168, 171));
        userPass.setForeground(new java.awt.Color(255, 255, 255));
        userPass.setBorder(null);
        userPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userPassKeyPressed(evt);
            }
        });
        loginDialog.getContentPane().add(userPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 173, 240, 40));

        userLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        userLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userLoginMouseClicked(evt);
            }
        });
        loginDialog.getContentPane().add(userLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 240, 110, 40));

        adminDialogBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgPackage/adminLoginPopup.png"))); // NOI18N
        loginDialog.getContentPane().add(adminDialogBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 300));

        inOutDialog.setUndecorated(true);
        inOutDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inOutDialogClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inOutDialogClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inOutDialogCloseMouseClicked(evt);
            }
        });
        inOutDialog.getContentPane().add(inOutDialogClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 30, 30));

        inOutOk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inOutOk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inOutOkMouseClicked(evt);
            }
        });
        inOutDialog.getContentPane().add(inOutOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 208, 110, 40));

        inOutDialogBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgPackage/inOutPop.png"))); // NOI18N
        inOutDialog.getContentPane().add(inOutDialogBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 300));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adminBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        adminBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminBtnMouseClicked(evt);
            }
        });
        getContentPane().add(adminBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 514, 290, 70));

        numScanImg.setBackground(new java.awt.Color(226, 93, 119));
        getContentPane().add(numScanImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 122, 230, 230));

        numScanName.setBackground(new java.awt.Color(17, 168, 171));
        getContentPane().add(numScanName, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 421, 265, 40));

        numScanIDView.setBackground(new java.awt.Color(57, 66, 100));
        numScanIDView.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        numScanIDView.setForeground(new java.awt.Color(241, 242, 242));
        getContentPane().add(numScanIDView, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 376, 230, 30));

        announceBar.setBackground(new java.awt.Color(57, 66, 100));
        getContentPane().add(announceBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 614, 930, 48));

        numpad.setBackground(new java.awt.Color(57, 66, 100));
        getContentPane().add(numpad, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 245, 275, 330));

        attendTime.setBackground(new java.awt.Color(57, 66, 100));
        getContentPane().add(attendTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 106, 200, 40));

        attendDate.setBackground(new java.awt.Color(57, 66, 100));
        getContentPane().add(attendDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, 230, 30));

        inOutButtonx.setBackground(new java.awt.Color(226, 93, 119));
        inOutButtonx.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inOutButtonx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inOutButtonxMouseClicked(evt);
            }
        });
        getContentPane().add(inOutButtonx, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 505, 130, 40));

        winMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        winMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                winMinMouseClicked(evt);
            }
        });
        getContentPane().add(winMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(965, 10, 22, 20));

        winClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        winClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                winCloseMouseClicked(evt);
            }
        });
        getContentPane().add(winClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(998, 10, 22, 20));

        winDrag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                winDragMouseDragged(evt);
            }
        });
        winDrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                winDragMousePressed(evt);
            }
        });
        getContentPane().add(winDrag, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1025, 85));

        attendanceMain.setBackground(new java.awt.Color(57, 66, 100));
        attendanceMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgPackage/Attendance.png"))); // NOI18N
        getContentPane().add(attendanceMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1026, 682));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void winMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_winMinMouseClicked
        this.setExtendedState(AttendanceGUI.ICONIFIED);
    }//GEN-LAST:event_winMinMouseClicked

    private void winCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_winCloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_winCloseMouseClicked

    private void winDragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_winDragMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_winDragMouseDragged

    private void winDragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_winDragMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_winDragMousePressed

    private void adminDialogCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminDialogCloseMouseClicked
        // TODO add your handling code here:
        
        loginDialog.dispose();
        this.setVisible(true);
        this.setEnabled(true);
    }//GEN-LAST:event_adminDialogCloseMouseClicked

    private void userNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameActionPerformed

    private void userLoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userLoginMouseClicked
        // TODO add your handling code here:
            String user = userName.getText();
            String pass = userPass.getText();
            if(user.length() == 0 && pass.length() == 0){
                JOptionPane.showMessageDialog(null, "Fields can't be empty!");
            } else if (user.length() == 0) {
                JOptionPane.showMessageDialog(null, "Username can't be empty!");
            } else if (pass.length() == 0) {
                JOptionPane.showMessageDialog(null, "Password can't be empty!");
            } else {
                
            
            
         


           if(VL.ValLogin(user,pass)) {
                loginDialog.dispose();
                AGUI.setVisible(true);
                this.setVisible(false);
           }
           else
              JOptionPane.showMessageDialog(null, "Incorrect Login Credentials");
            
        }
       
    }//GEN-LAST:event_userLoginMouseClicked

    private void adminBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminBtnMouseClicked
        // TODO add your handling code here:
        loginDialog.setVisible(true);
        loginDialog.setSize(598,301);
        //        loginDialog.pack();
        final Toolkit toolkit = Toolkit.getDefaultToolkit();
        final Dimension screenSize = toolkit.getScreenSize();
        final int x = (screenSize.width - loginDialog.getWidth()) / 2;
        final int y = (screenSize.height - loginDialog.getHeight()) / 2;
        loginDialog.setLocation(x, y);
        loginDialog.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_adminBtnMouseClicked

    private void inOutDialogCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inOutDialogCloseMouseClicked
        // TODO add your handling code here:
        inOutDialog.dispose();
        this.setVisible(true);
        this.setEnabled(true);
    }//GEN-LAST:event_inOutDialogCloseMouseClicked

    private void inOutOkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inOutOkMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_inOutOkMouseClicked

    private void inOutButtonxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inOutButtonxMouseClicked
        // TODO add your handling code here:
           // TODO add your handling code here:
        String empId = keyP.textarea.getText();
        String empStatus = keyP.statusBut.getText();
        System.out.println(empStatus);
            String timeNow;
            String dateNow;
            String timeNowDisplay;
//                Date dateobj = new Date();   
//                Calendar calendar = Calendar.getInstance();
//                Date date = calendar.getTime();
                DateFormat tNow = new SimpleDateFormat("HH:mm:ss");
                DateFormat dNow = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss a");    
                String dayNow = new SimpleDateFormat("EEEE", Locale.ENGLISH).format(Calendar.getInstance().getTime().getTime());
                timeNowDisplay = sdf.format(new Date());
                timeNow = tNow.format(new Date());
                dateNow = dNow.format(new Date());
                conn = dbC.getConnection();
        
       
        
        if(empId.length()== 0) {
            JOptionPane.showMessageDialog(null, "Enter your Id # first!"); 
        }
        else if(empStatus.equals("Limit")) {
            JOptionPane.showMessageDialog(null, "You have reached the number of times allowed to log in/out."); 
        }        
        else {
             try {
                     
                    String _24HourTime = timeNow;
                    SimpleDateFormat _24HourSDF = new SimpleDateFormat("HH:mm");
                    SimpleDateFormat _12HourSDF = new SimpleDateFormat("a");
                    Date _24HourDt = _24HourSDF.parse(_24HourTime);
                    String amPm = _12HourSDF.format(_24HourDt);
                    
                    SimpleDateFormat parser = new SimpleDateFormat("HH:mm");
                    Date twelve = parser.parse("11:59");
                    Date thirteen = parser.parse("13:01");
                    String noonNot = null;

                    try {
                        Date userDate = parser.parse(timeNow);
                        if (userDate.after(twelve) && userDate.before(thirteen)) {
                        noonNot = "True"; 
                    } else {
                        noonNot = "False";     
                        }
                    } catch (ParseException e) {
                        // Invalid date was entered
}
                    
                 
                 System.out.println("Trying connect");
                   Connection connxx = dbC.getConnection();
                   PreparedStatement stmtxx;
                   stmtxx = connxx.prepareStatement("SELECT * FROM timeinout WHERE empId = ?  AND date = ? AND day = ?");
                   stmtxx.setString(1, empId); 
                   stmtxx.setString(2, dateNow);
                   stmtxx.setString(3, dayNow);
                   System.out.println("Trying connect 2");
                   ResultSet rsxx = stmtxx.executeQuery();
               //STEP 5: Extract data from result set
               if(rsxx.next()){
                  System.out.println("True");
                  String amTimeIn = rsxx.getString("amTimeIn");
                  String amTimeOut = rsxx.getString("amTimeOut");
                  String pmTimeIn = rsxx.getString("pmTimeIn");
                  String pmTimeOut = rsxx.getString("pmTimeOut");
                  
                        if (amPm.equals("AM")) {
                                if(amTimeOut.equals("00:00:00") && !amTimeIn.equals("00:00:00")) {
                                        try {
                                        System.out.println("Trying to connect");
                                        Class.forName("com.mysql.jdbc.Driver");
                                        conn = dbC.getConnection();
                                        PreparedStatement stmtx = conn.prepareStatement("UPDATE  timeinout SET status = ?, amTimeOut = ? WHERE empId = ?  AND date = ? AND day = ?");
                                        stmtx.setString(1,empStatus);
                                        stmtx.setString(2,timeNow);
                                        stmtx.setString(3,empId);
                                        stmtx.setString(4, dateNow);
                                        stmtx.setString(5, dayNow);
                                        stmtx.executeUpdate();
                                            keyP.clear();
                                            String DefImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/picBg.png";
                                                keyP.textarea.setText("");
                                                keyP.textareaName.setText("");
                                                keyP.statusBut.setText("");
                                                keyP.camScanImg.setIcon(ResizeImage(DefImgPath,null));
                                            JOptionPane.showMessageDialog(null, "Status: " + empStatus + "\nDay: " + dayNow + "\nTime: " + timeNowDisplay +"\nDate: " + dateNow + "\nSuccess!");   


                                            }catch(SQLException se){
                                          //Handle errors for JDBC
                                          se.printStackTrace();
                                       }catch(Exception e){
                                          //Handle errors for Class.forName
                                          e.printStackTrace();
                                       }
                                                finally{
                                          //finally block used to close resources
                                          try{
                                             if(stmt!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                          }// do nothing
                                          try{
                                             if(conn!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                             se.printStackTrace();
                                          }//end finally try
                                       }//end try
                                       System.out.println("Goodbye!");
                      
                                    
                                } else if (!amTimeOut.equals("00:00:00") && !amTimeIn.equals("00:00:00")) {
                                    JOptionPane.showMessageDialog(null, "You've already logged two times this morning.");
                                } else {
                                     JOptionPane.showMessageDialog(null, "Exceeded!");
                                }
                        } else if (amPm.equals("PM")) {
                            System.out.println(amPm);
                            if(amTimeOut.equals("00:00:00") && !amTimeIn.equals("00:00:00") && noonNot.equals("True")) {
                                System.out.println(noonNot);
                                                                         try {
                                        System.out.println("Trying to connect");
                                        Class.forName("com.mysql.jdbc.Driver");
                                        conn = dbC.getConnection();
                                        PreparedStatement stmtx = conn.prepareStatement("UPDATE  timeinout SET status = ?, amTimeOut = ? WHERE empId = ?  AND date = ? AND day = ?");
                                        stmtx.setString(1,empStatus);
                                        stmtx.setString(2,timeNow);
                                        stmtx.setString(3,empId);
                                        stmtx.setString(4, dateNow);
                                        stmtx.setString(5, dayNow);
                                        stmtx.executeUpdate();
                                            keyP.clear();
                                            String DefImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/picBg.png";
                                                keyP.textarea.setText("");
                                                keyP.textareaName.setText("");
                                                keyP.statusBut.setText("");
                                                keyP.camScanImg.setIcon(ResizeImage(DefImgPath,null));
                                            JOptionPane.showMessageDialog(null, "Status: " + empStatus + "\nDay: " + dayNow + "\nTime: " + timeNowDisplay +"\nDate: " + dateNow + "\nSuccess!");   


                                            }catch(SQLException se){
                                          //Handle errors for JDBC
                                          se.printStackTrace();
                                       }catch(Exception e){
                                          //Handle errors for Class.forName
                                          e.printStackTrace();
                                       }
                                                finally{
                                          //finally block used to close resources
                                          try{
                                             if(stmt!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                          }// do nothing
                                          try{
                                             if(conn!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                             se.printStackTrace();
                                          }//end finally try
                                       }//end try
                                       System.out.println("Goodbye!");
                                 
                             } else if (pmTimeOut.equals("00:00:00") && pmTimeIn.equals("00:00:00") && noonNot.equals("True")) {
                                        try {
                                        System.out.println("Trying to connect");
                                        Class.forName("com.mysql.jdbc.Driver");
                                        conn = dbC.getConnection();
                                        PreparedStatement stmtx = conn.prepareStatement("UPDATE  timeinout SET status = ?, pmTimeIn = ? WHERE empId = ?   AND date = ? AND day = ?");
                                        stmtx.setString(1,empStatus);
                                        stmtx.setString(2,timeNow);
                                        stmtx.setString(3,empId);
                                        stmtx.setString(4, dateNow);
                                        stmtx.setString(5, dayNow);
                                        stmtx.executeUpdate();
                                            keyP.clear();
                                            String DefImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/picBg.png";
                                                keyP.textarea.setText("");
                                                keyP.textareaName.setText("");
                                                keyP.statusBut.setText("");
                                                keyP.camScanImg.setIcon(ResizeImage(DefImgPath,null));
                                            JOptionPane.showMessageDialog(null, "Status: " + empStatus + "\nDay: " + dayNow + "\nTime: " + timeNowDisplay +"\nDate: " + dateNow + "\nSuccess!");   


                                            }catch(SQLException se){
                                          //Handle errors for JDBC
                                          se.printStackTrace();
                                       }catch(Exception e){
                                          //Handle errors for Class.forName
                                          e.printStackTrace();
                                       }
                                                finally{
                                          //finally block used to close resources
                                          try{
                                             if(stmt!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                          }// do nothing
                                          try{
                                             if(conn!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                             se.printStackTrace();
                                          }//end finally try
                                       }//end try
                                       System.out.println("Goodbye!");                                 
                                 
                             } else if (pmTimeOut.equals("00:00:00") && !pmTimeIn.equals("00:00:00")) {
                                                                   try {
                                        System.out.println("Trying to connect");
                                        Class.forName("com.mysql.jdbc.Driver");
                                        conn = dbC.getConnection();
                                        PreparedStatement stmtx = conn.prepareStatement("UPDATE  timeinout SET status = ?, pmTimeOut = ? WHERE empId = ?  AND date = ? AND day = ?");
                                        stmtx.setString(1,empStatus);
                                        stmtx.setString(2,timeNow);
                                        stmtx.setString(3,empId);
                                        stmtx.setString(4, dateNow);
                                        stmtx.setString(5, dayNow);
                                        stmtx.executeUpdate();
                                            keyP.clear();
                                            String DefImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/picBg.png";
                                                keyP.textarea.setText("");
                                                keyP.textareaName.setText("");
                                                keyP.statusBut.setText("");
                                                keyP.camScanImg.setIcon(ResizeImage(DefImgPath,null));
                                            JOptionPane.showMessageDialog(null, "Status: " + empStatus + "\nDay: " + dayNow + "\nTime: " + timeNowDisplay +"\nDate: " + dateNow + "\nSuccess!");   


                                            }catch(SQLException se){
                                          //Handle errors for JDBC
                                          se.printStackTrace();
                                       }catch(Exception e){
                                          //Handle errors for Class.forName
                                          e.printStackTrace();
                                       }
                                                finally{
                                          //finally block used to close resources
                                          try{
                                             if(stmt!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                          }// do nothing
                                          try{
                                             if(conn!=null)
                                                conn.close();
                                          }catch(SQLException se){
                                             se.printStackTrace();
                                          }//end finally try
                                       }//end try
                                       System.out.println("Goodbye!");
                                 
                             } 
                             else if (!pmTimeOut.equals("00:00:00") && !pmTimeIn.equals("00:00:00")) {
                                    JOptionPane.showMessageDialog(null, "You've already logged two times this afternoon.");
                             } else {
                                    JOptionPane.showMessageDialog(null, "Loggiin times exceeded!");
                            }
                        }
             } else {
                System.out.println("False");
                
                if(amPm.equals("AM")) {
                    
                try {
                
                System.out.println("Trying to connect");
                    Class.forName("com.mysql.jdbc.Driver");
                    conn = dbC.getConnection();
                    System.out.println("Trying to query");
                    PreparedStatement stmtx = conn.prepareStatement("INSERT INTO timeinout(empId, status, day, amTimeIn, date) VALUES (?,?,?,?,?)");
                    System.out.println("queried");
                    stmtx.setString(1,empId); 
                    stmtx.setString(2,empStatus);
                    stmtx.setString(3,dayNow);
                    stmtx.setString(4,timeNow);
                    stmtx.setString(5,dateNow);
                    System.out.println("Executing");
                    stmtx.executeUpdate();
                    System.out.println("Executed");
                    System.out.println("Success");
                        keyP.clear();
                        String DefImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/picBg.png";
                            keyP.textarea.setText("");
                            keyP.textareaName.setText("");
                            keyP.statusBut.setText("");
                            keyP.camScanImg.setIcon(ResizeImage(DefImgPath,null));
                        JOptionPane.showMessageDialog(null, "Status: " + empStatus + "\nDay: " + dayNow + "\nTime: " + timeNowDisplay +"\nDate: " + dateNow + "\nSuccess!");   

            
                        }catch(SQLException se){
                      //Handle errors for JDBC
                      se.printStackTrace();
                   }catch(Exception e){
                      //Handle errors for Class.forName
                      e.printStackTrace();
                   }
                            finally{
                      //finally block used to close resources
                      try{
                         if(stmt!=null)
                            conn.close();
                      }catch(SQLException se){
                      }// do nothing
                      try{
                         if(conn!=null)
                            conn.close();
                      }catch(SQLException se){
                         se.printStackTrace();
                      }//end finally try
                   }//end try
                   System.out.println("Goodbye!");

                } else {
                    try {
                        System.out.println("\nass" + noonNot+" xx dadada");
                System.out.println("Trying to connect");
                    Class.forName("com.mysql.jdbc.Driver");
                    conn = dbC.getConnection();
                    System.out.println("Trying to query");
                    PreparedStatement stmtx = conn.prepareStatement("INSERT INTO timeinout(empId, status, day, pmTimeIn, date) VALUES (?,?,?,?,?)");
                    System.out.println("queried");
                    stmtx.setString(1,empId); 
                    stmtx.setString(2,empStatus);
                    stmtx.setString(3,dayNow);
                    stmtx.setString(4,timeNow);
                    stmtx.setString(5,dateNow);
                    System.out.println("Executing");
                    stmtx.executeUpdate();
                    System.out.println("Executed");
                    System.out.println("Success");
                        keyP.clear();
                        String DefImgPath = "D:/.. Jariel/Programs/Payroll/CTUPayroll/build/classes/Resources/picBg.png";
                            keyP.textarea.setText("");
                            keyP.textareaName.setText("");
                            keyP.statusBut.setText("");
                            keyP.camScanImg.setIcon(ResizeImage(DefImgPath,null));
                        JOptionPane.showMessageDialog(null, "Status: " + empStatus + "\nDay: " + dayNow + "\nTime: " + timeNowDisplay +"\nDate: " + dateNow + "\nSuccess!");   

            
                        }catch(SQLException se){
                      //Handle errors for JDBC
                      se.printStackTrace();
                   }catch(Exception e){
                      //Handle errors for Class.forName
                      e.printStackTrace();
                   }
                            finally{
                      //finally block used to close resources
                      try{
                         if(stmt!=null)
                            conn.close();
                      }catch(SQLException se){
                      }// do nothing
                      try{
                         if(conn!=null)
                            conn.close();
                      }catch(SQLException se){
                         se.printStackTrace();
                      }//end finally try
                   }//end try
                   System.out.println("Goodbye!");
                }
               }
               } catch(HeadlessException | SQLException e) {
                       System.out.println("Not Connected In Out Catch");
               } catch (ParseException ex) {
                Logger.getLogger(AttendanceGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

    }                                         
        
        
        

    }//GEN-LAST:event_inOutButtonxMouseClicked

    private void userPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userPassKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String user = userName.getText();
            String pass = userPass.getText();
            if(user.length() == 0 && pass.length() == 0){
                JOptionPane.showMessageDialog(null, "Fields can't be empty!");
            } else if (user.length() == 0) {
                JOptionPane.showMessageDialog(null, "Username can't be empty!");
            } else if (pass.length() == 0) {
                JOptionPane.showMessageDialog(null, "Password can't be empty!");
            } else {

           if(VL.ValLogin(user,pass)) {
                loginDialog.dispose();
                AGUI.setVisible(true);
                this.setVisible(false);
           }
           else
              JOptionPane.showMessageDialog(null, "Incorrect Login Credentials");
            
        }
            }
    }//GEN-LAST:event_userPassKeyPressed

    private void userNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userNameKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String user = userName.getText();
            String pass = userPass.getText();
            if(user.length() == 0 && pass.length() == 0){
                JOptionPane.showMessageDialog(null, "Fields can't be empty!");
            } else if (user.length() == 0) {
                JOptionPane.showMessageDialog(null, "Username can't be empty!");
            } else if (pass.length() == 0) {
                JOptionPane.showMessageDialog(null, "Password can't be empty!");
            } else {
                
            
            
          


           if(VL.ValLogin(user,pass)) {
                loginDialog.dispose();
                AGUI.setVisible(true);
                this.setVisible(false);
           }
           else
              JOptionPane.showMessageDialog(null, "Incorrect Login Credentials");
            
        }
            }
    }//GEN-LAST:event_userNameKeyPressed
    
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttendanceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttendanceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttendanceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttendanceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttendanceGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminBtn;
    private javax.swing.JLabel adminDialogBg;
    private javax.swing.JLabel adminDialogClose;
    private java.awt.Panel announceBar;
    private java.awt.Panel attendDate;
    private java.awt.Panel attendTime;
    private javax.swing.JLabel attendanceMain;
    private java.awt.Panel inOutButtonx;
    private javax.swing.JDialog inOutDialog;
    private javax.swing.JLabel inOutDialogBg;
    private javax.swing.JLabel inOutDialogClose;
    private javax.swing.JLabel inOutOk;
    private javax.swing.JDialog loginDialog;
    private java.awt.Panel numScanIDView;
    private java.awt.Panel numScanImg;
    private java.awt.Panel numScanName;
    private java.awt.Panel numpad;
    private javax.swing.JLabel userLogin;
    private javax.swing.JTextField userName;
    private javax.swing.JPasswordField userPass;
    private javax.swing.JLabel winClose;
    private javax.swing.JLabel winDrag;
    private javax.swing.JLabel winMin;
    // End of variables declaration//GEN-END:variables


    
}
